#!/usr/bin/env python3

import socket, sys, time, struct

# send MQTT message 'open' to cmnd/<DeviceName>/OTA
# send MQTT message 'reboot' to cmnd/<DeviceName>/OTA after sending updates

if len(sys.argv) < 3:
    print("Usage: %s <ip addr> <file with path> [<failure to simulate>]"
    sys.exit(1)

addr, filename = sys.argv[1], sys.argv[2]
simfail = ''
if len(sys.argv) > 3:
    simfail = sys.argv[3]

def make_packet(ptype, payload):
    length = len(payload) + 3
    if simfail == 'length1a' and ptype == 1:
        length -= 1
    elif simfail == 'length1b' and ptype == 1:
        length += 1
    elif simfail == 'length2a' and ptype == 2:
        length -= 1
    elif simfail == 'length2b' and ptype == 2:
        length += 1
    payload = bytes([length, ptype]) + payload
    checksum = 0
    for b in payload:
        checksum ^= b
    if simfail == 'checksum1' and ptype == 1:
        checksum ^= 0xbd
    elif simfail == 'checksum2' and ptype == 2:
        checksum ^= 0xbd
    return payload + bytes([checksum])

port = 1337
filedata = open(filename, 'rb').read()

s = socket.socket()
s.connect((addr, port))

header = bytes([len(filedata) // 256, len(filedata) % 256]) + filename.encode('ascii')
print("Sending header")
if simfail == 'timeout1':
    time.sleep(40)
elif simfail == 'zero1':
    s.close()
    time.sleep(10)
elif simfail == 'rst':
    s.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', 1, 0))
    time.sleep(1)
    s.close()
    time.sleep(10)

ptype = 1
if simfail == 'type1':
    ptype = 2
elif simfail == 'short':
    header = b'12'
data = make_packet(ptype, header)

if simfail == 'rstw1':
    # Prepare RST
    s.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', 1, 0))
    time.sleep(1)

if simfail == 'frag':
    s.send(data[0:2])
    time.sleep(1)
    s.send(data[2:])
else:
    s.send(data)

if simfail == 'rstw1':
    # Execute RST
    s.close()
    time.sleep(10)

print("Waiting for header Ack")
if s.recv(1) != b'1':
    print("Invalid header Ack")
    sys.exit(1)

if simfail == 'overflow':
    filedata += b'a'

while filedata:
    segment = filedata[:250]
    filedata = filedata[250:]
    print("Sending segment")
    if simfail == 'timeout2':
        time.sleep(40)
    elif simfail == 'zero2':
        s.close()
        time.sleep(10)
    ptype = 2
    if simfail == 'type2':
        ptype = 1

    if simfail == 'rstw2':
        # Prepare RST
        s.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', 1, 0))
        time.sleep(1)

    s.send(make_packet(ptype, segment))

    if simfail == 'rstw2':
        # Execute RST
        s.close()
        time.sleep(10)

    print("Waiting for Ack")
    if s.recv(1) != b'2':
        print("Invalid payload Ack")
        sys.exit(1)

print("Sending EOF segment")
s.send(make_packet(2, b''))
print("Waiting for Ack")
if s.recv(1) != b'2':
    bprint("Invalid Ack")
    sys.exit(1)

print("Waiting for final Ack")
if s.recv(1) != b'3':
    print("Invalid Ack")
    sys.exit(1)

print("Done")
