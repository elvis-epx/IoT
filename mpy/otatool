#!/usr/bin/env python3

import socket, sys, time, struct, binascii

# send MQTT message 'open' to cmnd/<DeviceName>/OTA
# send MQTT message 'commit' to cmnd/<DeviceName>/OTA after sending all updates
# and send 'reboot' to restart device and use the new code

if len(sys.argv) < 4:
    print("Usage: %s <ip addr> send <local file> <remote file> [<failure to simulate>]" % sys.argv[0], file=sys.stderr)
    print("       %s <ip addr> hash <remote file> [<failure to simulate>]" % sys.argv[0], file=sys.stderr)
    print("       %s <ip addr> rm <remote file> [<failure to simulate>]" % sys.argv[0], file=sys.stderr)
    sys.exit(1)

addr, op = sys.argv[1], sys.argv[2]
simfail = ''
if op == "send":
    localfile, remotefile = sys.argv[3], sys.argv[4]
    if remotefile == "=":
        remotefile = localfile
    if len(sys.argv) > 5:
        simfail = sys.argv[5]
elif op == "hash":
    remotefile = sys.argv[3]
    if len(sys.argv) > 4:
        simfail = sys.argv[4]
elif op == "rm":
    remotefile = sys.argv[3]
    if len(sys.argv) > 4:
        simfail = sys.argv[4]

def make_packet(ptype, payload):
    length = len(payload) + 3
    if simfail == 'length1a' and ptype == 1:
        length -= 1
    elif simfail == 'length1b' and ptype == 1:
        length += 1
    elif simfail == 'length2a' and ptype == 2:
        length -= 1
    elif simfail == 'length2b' and ptype == 2:
        length += 1
    payload = bytes([length, ptype]) + payload
    checksum = 0
    for b in payload:
        checksum ^= b
    if simfail == 'checksum1' and ptype == 1:
        checksum ^= 0xbd
    elif simfail == 'checksum2' and ptype == 2:
        checksum ^= 0xbd
    return payload + bytes([checksum])

port = 1337

s = socket.socket()
s.connect((addr, port))

if op == "send":
    filedata = open(localfile, 'rb').read()
    header = bytes([len(filedata) // 256, len(filedata) % 256]) + remotefile.encode('ascii')
elif op == "hash" or op == "rm":
    header = remotefile.encode('ascii')

print("Sending header", file=sys.stderr)
if simfail == 'timeout1':
    time.sleep(40)
elif simfail == 'zero1':
    s.close()
    time.sleep(10)
elif simfail == 'rst':
    s.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', 1, 0))
    time.sleep(1)
    s.close()
    time.sleep(10)

if op == "send":
    ptype = 1
elif op == "hash":
    ptype = 5
elif op == "rm":
    ptype = 7

if simfail == 'type1':
    ptype = 2
elif simfail == 'short':
    header = b'12'
data = make_packet(ptype, header)

if simfail == 'rstw1':
    # Prepare RST
    s.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', 1, 0))
    time.sleep(1)

if simfail == 'frag':
    s.send(data[0:2])
    time.sleep(1)
    s.send(data[2:])
else:
    s.send(data)

if simfail == 'rstw1':
    # Execute RST
    s.close()
    time.sleep(10)

print("Waiting for header Ack", file=sys.stderr)

if op == 'hash':
    if s.recv(1) != b'6':
        print("Invalid header response", file=sys.stderr)
        sys.exit(1)
    h = s.recv(41)[0:40]
    print(h.decode('ascii'))
    sys.exit(0)

elif op == 'rm':
    if s.recv(1) != b'8':
        print("Invalid header response", file=sys.stderr)
        sys.exit(1)
    sys.exit(0)

if s.recv(1) != b'1':
    print("Invalid header Ack", file=sys.stderr)
    sys.exit(1)

if simfail == 'overflow':
    filedata += b'a'

while filedata:
    segment = filedata[:250]
    filedata = filedata[250:]
    print("Sending segment", file=sys.stderr)
    if simfail == 'timeout2':
        time.sleep(40)
    elif simfail == 'zero2':
        s.close()
        time.sleep(10)
    ptype = 2
    if simfail == 'type2':
        ptype = 1

    if simfail == 'rstw2':
        # Prepare RST
        s.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', 1, 0))
        time.sleep(1)

    s.send(make_packet(ptype, segment))

    if simfail == 'rstw2':
        # Execute RST
        s.close()
        time.sleep(10)

    print("Waiting for Ack", file=sys.stderr)
    if s.recv(1) != b'2':
        print("Invalid payload Ack", file=sys.stderr)
        sys.exit(1)

print("Sending EOF segment", file=sys.stderr)
s.send(make_packet(2, b''))
print("Waiting for Ack", file=sys.stderr)
if s.recv(1) != b'2':
    bprint("Invalid Ack", file=sys.stderr)
    sys.exit(1)

print("Waiting for final Ack", file=sys.stderr)
if s.recv(1) != b'3':
    print("Invalid Ack", file=sys.stderr)
    sys.exit(1)

print("Done", file=sys.stderr)
